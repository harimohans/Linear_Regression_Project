# -*- coding: utf-8 -*-
"""Linear_Regression_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P0ooQ6DJz0jYrPOmNU9UfmtPw9x5vBJq

**Importing Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""Getting the data"""

customers = pd.read_csv('/content/Ecommerce Customers')

# Check the head
customers.head()

# Using describe() method for data description
customers.describe()

# Check info
customers.info()

"""Exploratory Data Analysis"""

# Jointplot betweeen 'Time on Website' and 'Yearly Amount Spent'
sns.set_palette('GnBu_d')
sns.set_style('whitegrid')

sns.jointplot(x='Time on Website',y='Yearly Amount Spent',data=customers)

# Jointplot with 'Time on App' and 'Yearly Amount Spent'

sns.jointplot(x='Time on App',y='Yearly Amount Spent',data=customers)

# Jointplot for comparing 'Time on App' and 'Length of Membership'

sns.jointplot(x='Time on App',y = 'Length of Membership',kind='hex',data = customers)

# Now let's explore the features relationship for entire dataset by using pairplot

sns.pairplot(customers)

"""So, from above pairplot we get that the feature most correlated with the 'Yearly Amount Spent' is 'Length of Membership' as there plot seems to be linear."""

# Now creating a linear model plot of 'Yearly Amount Spent' vs 'Length of Membership'

sns.lmplot(x='Length of Membership',y = 'Yearly Amount Spent',data = customers)

"""## **Training and Testing Data**"""

# Setting a variabe y  equal to 'Yearly Amount Spent'
y = customers['Yearly Amount Spent']

# Setting a variable x equal to numerical features of customers
x = customers.drop(['Yearly Amount Spent','Address','Email','Avatar'],axis = 1)

# Splitting the dataset into training and testing

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=101)

"""# **Training the Model**"""

# Importing LinearRegression algorithm
from sklearn.linear_model import LinearRegression

# Creating an instance of LinearRegression() model
lm = LinearRegression()

# Fit lm on training data
lm.fit(x_train,y_train)

"""Coefficients of model"""

print('Coefficients: \n', lm.coef_)

"""# **Predicting Test Data**"""

# Data predictions
predictions = lm.predict(x_test)

#Creating a scatterplot of the real test values versus the predicted values

plt.scatter(y_test,predictions)
plt.xlabel('Y Test')
plt.ylabel('Predicted Y')

"""# **Evaluating the Model**"""

# Calculation of Mean Absolute Error(MAE), Mean Squared Error(MSE), and Root Mean Squared Error(RMSE)

from sklearn import metrics

print('MAE:',metrics.mean_absolute_error(y_test,predictions))
print('MSE:',metrics.mean_squared_error(y_test,predictions))
print('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,predictions)))